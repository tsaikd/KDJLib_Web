diff --git a/src/main/com/mongodb/util/AbstractObjectSerializer.java b/src/main/com/mongodb/util/AbstractObjectSerializer.java
index b524e0e..4f043cc 100644
--- a/src/main/com/mongodb/util/AbstractObjectSerializer.java
+++ b/src/main/com/mongodb/util/AbstractObjectSerializer.java
@@ -16,6 +16,8 @@
 
 package com.mongodb.util;
 
+import com.mongodb.util.ObjectSerializer;
+
 abstract class AbstractObjectSerializer implements ObjectSerializer {
 
     @Override
diff --git a/src/main/com/mongodb/util/ClassMapBasedObjectSerializer.java b/src/main/com/mongodb/util/ClassMapBasedObjectSerializer.java
index ce9f176..788bd6b 100644
--- a/src/main/com/mongodb/util/ClassMapBasedObjectSerializer.java
+++ b/src/main/com/mongodb/util/ClassMapBasedObjectSerializer.java
@@ -17,10 +17,12 @@
 
 package com.mongodb.util;
 
-import com.mongodb.Bytes;
+import java.util.List;
+
 import org.bson.util.ClassMap;
 
-import java.util.List;
+import com.mongodb.Bytes;
+import com.mongodb.util.ObjectSerializer;
 
 /**
  * Objects of type ClassMapBasedObjectSerializer are constructed to perform
@@ -30,7 +32,7 @@ import java.util.List;
  *
  * @author breinero
  */
-class ClassMapBasedObjectSerializer extends AbstractObjectSerializer {
+public class ClassMapBasedObjectSerializer extends AbstractObjectSerializer {
 
     /**
      * Assign a ObjectSerializer to perform a type specific serialization scheme
@@ -40,7 +42,7 @@ class ClassMapBasedObjectSerializer extends AbstractObjectSerializer {
      * This means that it is only necessary assign ObjectSerializers to base classes. @see org.bson.util.ClassMap
      * @param serializer performs the serialization mapping specific to the @param key type
      */
-    void addObjectSerializer(Class c, ObjectSerializer serializer) {
+    public void addObjectSerializer(Class<?> c, ObjectSerializer serializer) {
         _serializers.put(c , serializer);
     }
     
diff --git a/src/main/com/mongodb/util/JSON.java b/src/main/com/mongodb/util/JSON.java
index ef548a0..19feb07 100644
--- a/src/main/com/mongodb/util/JSON.java
+++ b/src/main/com/mongodb/util/JSON.java
@@ -18,9 +18,12 @@
 
 package com.mongodb.util;
 
-import com.mongodb.DBObject;
 import org.bson.BSONCallback;
 
+import com.mongodb.DBObject;
+import com.mongodb.util.JSONCallback;
+import com.mongodb.util.JSONParseException;
+
 /**
  *   Helper methods for JSON serialization and de-serialization
  */
@@ -234,14 +237,13 @@ class JSONParser {
 	}
 
         read('{');
-        char current = get();
         while(get() != '}') {
             String key = parseString(false);
             read(':');
             Object value = parse(key);
 	    doCallback(key, value);
 
-            if((current = get()) == ',') {
+            if(get() == ',') {
                 read(',');
             }
             else {
@@ -425,7 +427,6 @@ class JSONParser {
      */
     public Number parseNumber() {
 
-        char current = get();
         int start = this.pos;
         boolean isDouble = false;
 
diff --git a/src/main/com/mongodb/util/JSONSerializers.java b/src/main/com/mongodb/util/JSONSerializers.java
index dacb4c6..5167393 100644
--- a/src/main/com/mongodb/util/JSONSerializers.java
+++ b/src/main/com/mongodb/util/JSONSerializers.java
@@ -16,18 +16,6 @@
 
 package com.mongodb.util;
 
-import com.mongodb.BasicDBObject;
-import com.mongodb.Bytes;
-import com.mongodb.DBObject;
-import com.mongodb.DBRefBase;
-import org.bson.types.BSONTimestamp;
-import org.bson.types.Binary;
-import org.bson.types.Code;
-import org.bson.types.CodeWScope;
-import org.bson.types.MaxKey;
-import org.bson.types.MinKey;
-import org.bson.types.ObjectId;
-
 import java.lang.reflect.Array;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -38,12 +26,26 @@ import java.util.SimpleTimeZone;
 import java.util.UUID;
 import java.util.regex.Pattern;
 
+import org.bson.types.BSONTimestamp;
+import org.bson.types.Binary;
+import org.bson.types.Code;
+import org.bson.types.CodeWScope;
+import org.bson.types.MaxKey;
+import org.bson.types.MinKey;
+import org.bson.types.ObjectId;
+
+import com.mongodb.BasicDBObject;
+import com.mongodb.Bytes;
+import com.mongodb.DBObject;
+import com.mongodb.DBRefBase;
+import com.mongodb.util.ObjectSerializer;
+
 /**
  * Defines static methods for getting {@code ObjectSerializer} instances that produce various flavors of JSON.
  */
 public class JSONSerializers {
 
-    private JSONSerializers() {
+    protected JSONSerializers() {
     }
 
     /**
@@ -106,10 +108,10 @@ public class JSONSerializers {
         return serializer;
     }
 
-    private abstract static class CompoundObjectSerializer extends AbstractObjectSerializer {
+    public abstract static class CompoundObjectSerializer extends AbstractObjectSerializer {
         protected final ObjectSerializer serializer;
 
-        CompoundObjectSerializer(ObjectSerializer serializer) {
+        protected CompoundObjectSerializer(ObjectSerializer serializer) {
             this.serializer = serializer;
         }
     }
@@ -281,7 +283,7 @@ public class JSONSerializers {
             boolean first = true;
             buf.append("[ ");
 
-            for (final Object o : ((Iterable) obj)) {
+            for (final Object o : ((Iterable<?>) obj)) {
                 if (first)
                     first = false;
                 else
@@ -303,11 +305,11 @@ public class JSONSerializers {
         public void serialize(Object obj, StringBuilder buf) {
             boolean first = true;
             buf.append("{ ");
-            Map m = (Map) obj;
-            Entry entry;
+            Map<?, ?> m = (Map<?, ?>) obj;
+            Entry<?, ?> entry;
 
             for (final Object o : m.entrySet()) {
-                entry = (Entry) o;
+                entry = (Entry<?, ?>) o;
                 if (first)
                     first = false;
                 else
@@ -442,10 +444,11 @@ public class JSONSerializers {
             super(serializer);
         }
 
+        @SuppressWarnings("deprecation")
 		protected void serialize(byte[] bytes, byte type, StringBuilder buf) {
             DBObject temp = new BasicDBObject();
             temp.put("$binary",
-                    (new Base64Codec()).encode(bytes));
+                    (new com.mongodb.util.Base64Codec()).encode(bytes));
             temp.put("$type", type);
             serializer.serialize(temp, buf);
         }
