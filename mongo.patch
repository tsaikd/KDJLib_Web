diff --git b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/AbstractObjectSerializer.java a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/AbstractObjectSerializer.java
index 16c6762..24a0ea1 100644
--- b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/AbstractObjectSerializer.java
+++ a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/AbstractObjectSerializer.java
@@ -14,9 +14,11 @@
 * limitations under the License.
 */
 
-package com.mongodb.util;
+package org.tsaikd.java.mongodb.fork.com.mongodb.util;
 
-abstract class AbstractObjectSerializer implements ObjectSerializer {
+import com.mongodb.util.ObjectSerializer;
+
+public abstract class AbstractObjectSerializer implements ObjectSerializer {
 
     @Override
     public String serialize(final Object obj) {
diff --git b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/ClassMapBasedObjectSerializer.java a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/ClassMapBasedObjectSerializer.java
index 7721473..a2e5bd4 100644
--- b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/ClassMapBasedObjectSerializer.java
+++ a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/ClassMapBasedObjectSerializer.java
@@ -15,12 +15,14 @@
  *   limitations under the License.
  */
 
-package com.mongodb.util;
+package org.tsaikd.java.mongodb.fork.com.mongodb.util;
+
+import java.util.List;
 
-import com.mongodb.Bytes;
 import org.bson.util.ClassMap;
 
-import java.util.List;
+import com.mongodb.Bytes;
+import com.mongodb.util.ObjectSerializer;
 
 /**
  * Objects of type ClassMapBasedObjectSerializer are constructed to perform
@@ -30,7 +32,7 @@ import java.util.List;
  *
  * @author breinero
  */
-class ClassMapBasedObjectSerializer extends AbstractObjectSerializer {
+public class ClassMapBasedObjectSerializer extends AbstractObjectSerializer {
 
     /**
      * Assign a ObjectSerializer to perform a type specific serialization scheme
@@ -40,7 +42,7 @@ class ClassMapBasedObjectSerializer extends AbstractObjectSerializer {
      * This means that it is only necessary assign ObjectSerializers to base classes. @see org.bson.util.ClassMap
      * @param serializer performs the serialization mapping specific to the @param key type
      */
-    void addObjectSerializer(Class c, ObjectSerializer serializer) {
+    public void addObjectSerializer(Class<?> c, ObjectSerializer serializer) {
         _serializers.put(c , serializer);
     }
     
diff --git b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSON.java a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSON.java
index a1ebea6..0a3e58f 100644
--- b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSON.java
+++ a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSON.java
@@ -16,11 +16,13 @@
  *   limitations under the License.
  */
 
-package com.mongodb.util;
+package org.tsaikd.java.mongodb.fork.com.mongodb.util;
 
 import org.bson.BSONCallback;
 
 import com.mongodb.DBObject;
+import com.mongodb.util.JSONCallback;
+import com.mongodb.util.JSONParseException;
 
 /**
  *   Helper methods for JSON serialization and de-serialization
@@ -224,7 +226,8 @@ class JSONParser {
 	}
 
         read('{');
-        char current = get();
+        @SuppressWarnings("unused")
+        char current = get();
         while(get() != '}') {
             String key = parseString(false);
             read(':');
@@ -419,7 +422,8 @@ class JSONParser {
      */
     public Number parseNumber() {
 
-        char current = get();
+        @SuppressWarnings("unused")
+        char current = get();
         int start = this.pos;
         boolean isDouble = false;
 
diff --git b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSONSerializers.java a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSONSerializers.java
index 8e632b5..4deb066 100644
--- b/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSONSerializers.java
+++ a/src/main/java/org/tsaikd/java/mongodb/fork/com/mongodb/util/JSONSerializers.java
@@ -14,27 +14,40 @@
  *   limitations under the License.
  */
 
-package com.mongodb.util;
-
-import com.mongodb.BasicDBObject;
-import com.mongodb.Bytes;
-import com.mongodb.DBObject;
-import com.mongodb.DBRefBase;
-import org.bson.types.*;
+package org.tsaikd.java.mongodb.fork.com.mongodb.util;
 
 import java.lang.reflect.Array;
 import java.text.SimpleDateFormat;
-import java.util.*;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.Map;
 import java.util.Map.Entry;
+import java.util.SimpleTimeZone;
+import java.util.UUID;
 import java.util.regex.Pattern;
 
+import org.bson.types.BSONTimestamp;
+import org.bson.types.Binary;
+import org.bson.types.Code;
+import org.bson.types.CodeWScope;
+import org.bson.types.MaxKey;
+import org.bson.types.MinKey;
+import org.bson.types.ObjectId;
+
+import com.mongodb.BasicDBObject;
+import com.mongodb.Bytes;
+import com.mongodb.DBObject;
+import com.mongodb.DBRefBase;
+import com.mongodb.util.Base64Codec;
+import com.mongodb.util.ObjectSerializer;
+
 /**
  * Defines static methods for getting <code>ObjectSerializer</code> instances that produce various flavors of
  * JSON.
  */
 public class JSONSerializers {
 
-    private JSONSerializers() {
+    protected JSONSerializers() {
     }
 
     /**
@@ -96,10 +109,10 @@ public class JSONSerializers {
         return serializer;
     }
 
-    private abstract static class CompoundObjectSerializer extends AbstractObjectSerializer {
+    public abstract static class CompoundObjectSerializer extends AbstractObjectSerializer {
         protected final ObjectSerializer serializer;
 
-        CompoundObjectSerializer(ObjectSerializer serializer) {
+        protected CompoundObjectSerializer(ObjectSerializer serializer) {
             this.serializer = serializer;
         }
     }
@@ -271,7 +284,7 @@ public class JSONSerializers {
             boolean first = true;
             buf.append("[ ");
 
-            for (final Object o : ((Iterable) obj)) {
+            for (final Object o : ((Iterable<?>) obj)) {
                 if (first)
                     first = false;
                 else
@@ -293,11 +306,11 @@ public class JSONSerializers {
         public void serialize(Object obj, StringBuilder buf) {
             boolean first = true;
             buf.append("{ ");
-            Map m = (Map) obj;
-            Entry entry;
+            Map<?, ?> m = (Map<?, ?>) obj;
+            Entry<?, ?> entry;
 
             for (final Object o : m.entrySet()) {
-                entry = (Entry) o;
+                entry = (Entry<?, ?>) o;
                 if (first)
                     first = false;
                 else
@@ -340,7 +353,7 @@ public class JSONSerializers {
 
     }
 
-    private static class ObjectIdSerializer extends CompoundObjectSerializer {
+    public static class ObjectIdSerializer extends CompoundObjectSerializer {
 
         ObjectIdSerializer(ObjectSerializer serializer) {
             super(serializer);
